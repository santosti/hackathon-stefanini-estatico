/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ToastMessage } from '../../Models/toast-message.models';
import { AngularBootstrapToastsService } from '../../angular-bootstrap-toasts.service';
import { filter, tap } from 'rxjs/operators';
import { interval } from 'rxjs';
export class ToastMessageComponent {
    /**
     * @param {?} toastsService
     */
    constructor(toastsService) {
        this.toastsService = toastsService;
        this.progressLineWidth = '100%';
        this.msInterval = 10;
        this.isMouseFocused = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentDuration = this.Toast.Duration;
        this.durationTimer = interval(this.msInterval).pipe(filter((/**
         * @return {?}
         */
        () => !this.isMouseFocused)), tap((/**
         * @return {?}
         */
        () => {
            this.currentDuration -= this.msInterval;
            if (this.Toast.IsProgressLineEnabled) {
                this.progressLineWidth = (100 / this.Toast.Duration * this.currentDuration).toFixed(0) + '%';
            }
            if (this.currentDuration <= 0) {
                this.Toast.Close();
            }
        }))).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.durationTimer) {
            this.durationTimer.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    animationPause() {
        this.isMouseFocused = true;
    }
    /**
     * @return {?}
     */
    animationPlay() {
        this.isMouseFocused = false;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.Toast.IsClosableByMouseClick) {
            this.Toast.Close(false);
        }
    }
    /**
     * @param {?=} confirmationResult
     * @return {?}
     */
    remove(confirmationResult) {
        this.Toast.Close(confirmationResult || false);
    }
}
ToastMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'Toast-Message',
                template: "<div\r\n    class=\"_toast {{ Toast.ToastClass || '' }}\"\r\n    (mouseover)=\"animationPause()\"\r\n    (mouseout)=\"animationPlay()\"\r\n    (click)=\"onClick()\">\r\n    <div class=\"_toast-header {{ Toast.TitleClass || '' }}\">\r\n        <i\r\n            *ngIf=\"Toast.IconClass\"\r\n            class=\"{{ Toast.IconClass }}\"></i>\r\n\r\n        <strong\r\n            class=\"mr-auto\">{{ Toast.Title }}</strong>\r\n\r\n        <small *ngIf=\"Toast.Moment\">{{ Toast.Moment }}</small>\r\n\r\n        <button\r\n            type=\"button\"\r\n            class=\"_close {{ Toast.CloseButtonClass || '' }}\"\r\n            (click)=\"remove()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n\r\n    <div\r\n        *ngIf=\"Toast.IsProgressLineEnabled\"\r\n        class=\"_duration-line {{ Toast.ProgressLineClass || '' }}\"\r\n        [style.width]=\"progressLineWidth\"></div>\r\n\r\n    <div\r\n        class=\"_toast-body {{ Toast.BodyClass || '' }}\"\r\n        [innerHTML]=\"Toast.Text\"></div>\r\n\r\n    <div\r\n        *ngIf=\"Toast.Type === 'confirm' && Toast.ToolbarItems\"\r\n        class=\"_toast-toolbar {{ Toast.ToolbarClass || '' }}\">\r\n        <button\r\n            *ngIf=\"Toast.ToolbarItems.actionButton.visible\"\r\n            class=\"_toast-toolbar_actionButton {{ Toast.ToolbarItems.actionButton.class || 'btn btn-success btn-sm' }}\"\r\n            (click)=\"remove(true)\">{{ Toast.ToolbarItems.actionButton.text || 'Confirm' }}</button>\r\n\r\n        <button\r\n            *ngIf=\"Toast.ToolbarItems.cancelButton.visible\"\r\n            class=\"_toast-toolbar_cancelButton {{ Toast.ToolbarItems.cancelButton.class || 'btn btn-light btn-sm' }}\"\r\n            (click)=\"remove(false)\">{{ Toast.ToolbarItems.cancelButton.text || 'Cancel' }}</button>\r\n    </div>\r\n</div>",
                styles: [":host{display:block}._toast{width:100%;margin-bottom:10px;border:1px solid #dadada;background:#fff;box-shadow:0 7px 9px -4px rgba(0,0,0,.2),0 14px 21px 2px rgba(0,0,0,.14),0 5px 26px 4px rgba(0,0,0,.12)}._toast-header{width:100%;display:flex;align-items:center;padding:8px;border-bottom:1px solid #dfe0e1;background:#f5f5f5;color:#6c757d}._duration-line{height:3px;background:rgba(0,0,0,.25);transition:.1s}._toast-body{font-size:12px;padding:12px;background:#fff}._toast-header i{margin-right:7px}._toast-header strong{font-size:16px}._toast-header small{font-size:11px;color:#6c757d}._toast-toolbar{margin:10px}._toast-toolbar_actionButton{margin-right:8px}button._close{padding:0;margin-left:.5rem;margin-bottom:.25rem;float:right;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0;font-size:1.5rem;font-weight:700;line-height:1;color:#000;opacity:.6}button._close:hover{cursor:pointer;opacity:.8}"]
            }] }
];
/** @nocollapse */
ToastMessageComponent.ctorParameters = () => [
    { type: AngularBootstrapToastsService }
];
ToastMessageComponent.propDecorators = {
    Toast: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ToastMessageComponent.prototype.Toast;
    /** @type {?} */
    ToastMessageComponent.prototype.currentDuration;
    /** @type {?} */
    ToastMessageComponent.prototype.progressLineWidth;
    /**
     * @type {?}
     * @private
     */
    ToastMessageComponent.prototype.msInterval;
    /**
     * @type {?}
     * @private
     */
    ToastMessageComponent.prototype.isMouseFocused;
    /**
     * @type {?}
     * @private
     */
    ToastMessageComponent.prototype.durationTimer;
    /**
     * @type {?}
     * @private
     */
    ToastMessageComponent.prototype.toastsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtbWVzc2FnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWJvb3RzdHJhcC10b2FzdHMvIiwic291cmNlcyI6WyJsaWIvQ29tcG9uZW50cy90b2FzdC1tZXNzYWdlL3RvYXN0LW1lc3NhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFTOUMsTUFBTSxPQUFPLHFCQUFxQjs7OztJQVU5QixZQUNZLGFBQTRDO1FBQTVDLGtCQUFhLEdBQWIsYUFBYSxDQUErQjtRQVBqRCxzQkFBaUIsR0FBVyxNQUFNLENBQUM7UUFFbEMsZUFBVSxHQUFnQixFQUFFLENBQUM7UUFDN0IsbUJBQWMsR0FBWSxLQUFLLENBQUM7SUFLckMsQ0FBQzs7OztJQUVKLFFBQVE7UUFDSixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBRTNDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQy9DLE1BQU07OztRQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBQyxFQUNsQyxHQUFHOzs7UUFBQyxHQUFHLEVBQUU7WUFDTCxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFeEMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFO2dCQUNsQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDaEc7WUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxFQUFFO2dCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ3RCO1FBQ0wsQ0FBQyxFQUFDLENBQ0wsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsQixDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BDO0lBQ0wsQ0FBQzs7OztJQUVNLGNBQWM7UUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVNLGFBQWE7UUFDaEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVNLE9BQU87UUFDVixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUU7WUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDOzs7OztJQUVNLE1BQU0sQ0FBRSxrQkFBNEI7UUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLElBQUksS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7O1lBOURKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsazFEQUE2Qzs7YUFJaEQ7Ozs7WUFWUSw2QkFBNkI7OztvQkFZakMsS0FBSzs7OztJQUFOLHNDQUFvQzs7SUFFcEMsZ0RBQStCOztJQUMvQixrREFBMEM7Ozs7O0lBRTFDLDJDQUFxQzs7Ozs7SUFDckMsK0NBQXdDOzs7OztJQUN4Qyw4Q0FBb0M7Ozs7O0lBR2hDLDhDQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRvYXN0TWVzc2FnZSB9IGZyb20gJy4uLy4uL01vZGVscy90b2FzdC1tZXNzYWdlLm1vZGVscyc7XHJcbmltcG9ydCB7IEFuZ3VsYXJCb290c3RyYXBUb2FzdHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYW5ndWxhci1ib290c3RyYXAtdG9hc3RzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgaW50ZXJ2YWwsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ1RvYXN0LU1lc3NhZ2UnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RvYXN0LW1lc3NhZ2UuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbXHJcbiAgICAgICAgJy4vdG9hc3QtbWVzc2FnZS5jb21wb25lbnQuY3NzJ1xyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVG9hc3RNZXNzYWdlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQElucHV0KCkgcHVibGljIFRvYXN0OiBUb2FzdE1lc3NhZ2U7XHJcblxyXG4gICAgcHVibGljIGN1cnJlbnREdXJhdGlvbjogbnVtYmVyO1xyXG4gICAgcHVibGljIHByb2dyZXNzTGluZVdpZHRoOiBzdHJpbmcgPSAnMTAwJSc7XHJcblxyXG4gICAgcHJpdmF0ZSBtc0ludGVydmFsOiBudW1iZXIgICAgICA9IDEwO1xyXG4gICAgcHJpdmF0ZSBpc01vdXNlRm9jdXNlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBkdXJhdGlvblRpbWVyOiBTdWJzY3JpcHRpb247XHJcblxyXG4gICAgY29uc3RydWN0b3IgKFxyXG4gICAgICAgIHByaXZhdGUgdG9hc3RzU2VydmljZTogQW5ndWxhckJvb3RzdHJhcFRvYXN0c1NlcnZpY2VcclxuICAgICkge31cclxuXHJcbiAgICBuZ09uSW5pdCAoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RHVyYXRpb24gPSB0aGlzLlRvYXN0LkR1cmF0aW9uO1xyXG5cclxuICAgICAgICB0aGlzLmR1cmF0aW9uVGltZXIgPSBpbnRlcnZhbCh0aGlzLm1zSW50ZXJ2YWwpLnBpcGUoXHJcbiAgICAgICAgICAgIGZpbHRlcigoKSA9PiAhdGhpcy5pc01vdXNlRm9jdXNlZCksXHJcbiAgICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnREdXJhdGlvbiAtPSB0aGlzLm1zSW50ZXJ2YWw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuVG9hc3QuSXNQcm9ncmVzc0xpbmVFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0xpbmVXaWR0aCA9ICgxMDAgLyB0aGlzLlRvYXN0LkR1cmF0aW9uICogdGhpcy5jdXJyZW50RHVyYXRpb24pLnRvRml4ZWQoMCkgKyAnJSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudER1cmF0aW9uIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlRvYXN0LkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25UaW1lcikge1xyXG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uVGltZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFuaW1hdGlvblBhdXNlICgpIHtcclxuICAgICAgICB0aGlzLmlzTW91c2VGb2N1c2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYW5pbWF0aW9uUGxheSAoKSB7XHJcbiAgICAgICAgdGhpcy5pc01vdXNlRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbkNsaWNrICgpIHtcclxuICAgICAgICBpZiAodGhpcy5Ub2FzdC5Jc0Nsb3NhYmxlQnlNb3VzZUNsaWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVG9hc3QuQ2xvc2UoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlIChjb25maXJtYXRpb25SZXN1bHQ/OiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5Ub2FzdC5DbG9zZShjb25maXJtYXRpb25SZXN1bHQgfHwgZmFsc2UpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==