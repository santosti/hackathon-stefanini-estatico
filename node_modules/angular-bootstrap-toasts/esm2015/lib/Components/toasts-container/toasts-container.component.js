/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { AngularBootstrapToastsService } from '../../angular-bootstrap-toasts.service';
import { trigger, style, animate, transition } from '@angular/animations';
export class ToastsContainerComponent {
    /**
     * @param {?} toastsService
     */
    constructor(toastsService) {
        this.toastsService = toastsService;
        this.Placement = {
            position: 'topRight'
        };
        /**
         * Width as CSS value
         */
        this.Width = '250px';
        this.Classes = '';
        this.defaultMargin = '15px';
        this.MarginAsString = '';
        this.toastsList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.messagesListSubscription = this.toastsService.ToastsList$.subscribe((/**
         * @param {?} toasts
         * @return {?}
         */
        toasts => {
            this.toastsList = toasts;
        }));
        this.initParams();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.messagesListSubscription) {
            this.messagesListSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initParams() {
        if (!this.Placement) {
            this.Placement = {};
        }
        this.Placement.marginTop = this.Placement.marginTop || this.defaultMargin;
        this.Placement.marginBottom = this.Placement.marginBottom || this.defaultMargin;
        this.Placement.marginLeft = this.Placement.marginLeft || this.defaultMargin;
        this.Placement.marginRight = this.Placement.marginRight || this.defaultMargin;
        this.Placement.position = this.Placement.position || 'topRight';
    }
}
ToastsContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'Angular-Bootstrap-Toasts-Container',
                template: "<div\r\n    class=\"Advanced-Bootstrap-Container {{ Classes || '' }}\"\r\n    [style.width]=\"Width\"\r\n    [style.left]=\"(Placement.position === 'topLeft'      || Placement.position === 'bottomLeft')  ? Placement.marginLeft : ''\"\r\n    [style.right]=\"(Placement.position === 'topRight'    || Placement.position === 'bottomRight') ? Placement.marginRight : ''\"\r\n    [style.top]=\"(Placement.position === 'topLeft'       || Placement.position === 'topRight')    ? Placement.marginTop : ''\"\r\n    [style.bottom]=\"(Placement.position === 'bottomLeft' || Placement.position === 'bottomRight') ? Placement.marginBottom : ''\">\r\n    \r\n    <Toast-Message\r\n        *ngFor=\"let toast of toastsList\"\r\n        class=\"Toast-Message-Container\"\r\n        [@enterAnimation]\r\n        [Toast]=\"toast\"></Toast-Message>\r\n\r\n</div>",
                animations: [
                    trigger('enterAnimation', [
                        transition(':enter', [
                            style({ transform: 'translateX(100%)', opacity: 0 }),
                            animate('350ms ease', style({ transform: 'translateX(0)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ transform: 'translateX(0)', opacity: 1 }),
                            animate('300ms ease', style({ transform: 'scale(0.1)', opacity: 0 }))
                        ])
                    ])
                ],
                styles: [".Advanced-Bootstrap-Container{position:fixed;z-index:9999!important}"]
            }] }
];
/** @nocollapse */
ToastsContainerComponent.ctorParameters = () => [
    { type: AngularBootstrapToastsService }
];
ToastsContainerComponent.propDecorators = {
    Placement: [{ type: Input }],
    Width: [{ type: Input }],
    Classes: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ToastsContainerComponent.prototype.Placement;
    /**
     * Width as CSS value
     * @type {?}
     */
    ToastsContainerComponent.prototype.Width;
    /** @type {?} */
    ToastsContainerComponent.prototype.Classes;
    /**
     * @type {?}
     * @private
     */
    ToastsContainerComponent.prototype.defaultMargin;
    /** @type {?} */
    ToastsContainerComponent.prototype.MarginAsString;
    /** @type {?} */
    ToastsContainerComponent.prototype.toastsList;
    /**
     * @type {?}
     * @private
     */
    ToastsContainerComponent.prototype.messagesListSubscription;
    /**
     * @type {?}
     * @private
     */
    ToastsContainerComponent.prototype.toastsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RzLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWJvb3RzdHJhcC10b2FzdHMvIiwic291cmNlcyI6WyJsaWIvQ29tcG9uZW50cy90b2FzdHMtY29udGFpbmVyL3RvYXN0cy1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFdkYsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBdUIxRSxNQUFNLE9BQU8sd0JBQXdCOzs7O0lBa0JqQyxZQUNZLGFBQTRDO1FBQTVDLGtCQUFhLEdBQWIsYUFBYSxDQUErQjtRQWpCeEMsY0FBUyxHQUFrQjtZQUN2QyxRQUFRLEVBQUUsVUFBVTtTQUN2QixDQUFDOzs7O1FBR2MsVUFBSyxHQUFXLE9BQU8sQ0FBQztRQUV4QixZQUFPLEdBQVcsRUFBRSxDQUFDO1FBRTdCLGtCQUFhLEdBQVcsTUFBTSxDQUFDO1FBRWhDLG1CQUFjLEdBQVcsRUFBRSxDQUFDO1FBQzVCLGVBQVUsR0FBbUIsRUFBRSxDQUFDO0lBTXBDLENBQUM7Ozs7SUFFSixRQUFRO1FBQ0osSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7UUFBQyxNQUFNLENBQUMsRUFBRTtZQUM5RSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUM3QixDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQy9CLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUMvQztJQUNMLENBQUM7Ozs7O0lBRU8sVUFBVTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1NBQ3ZCO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNoRixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2hGLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxJQUFNLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDaEYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLElBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUVoRixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBUSxVQUFVLENBQUM7SUFDNUUsQ0FBQzs7O1lBcEVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0NBQW9DO2dCQUM5QyxzMUJBQWdEO2dCQUloRCxVQUFVLEVBQUU7b0JBQ1IsT0FBTyxDQUNMLGdCQUFnQixFQUFFO3dCQUNoQixVQUFVLENBQUMsUUFBUSxFQUFFOzRCQUNqQixLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDOzRCQUNwRCxPQUFPLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7eUJBQzNFLENBQUM7d0JBQ0YsVUFBVSxDQUFDLFFBQVEsRUFBRTs0QkFDakIsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUM7NEJBQ2pELE9BQU8sQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzt5QkFDeEUsQ0FBQztxQkFDSCxDQUNGO2lCQUNKOzthQUNKOzs7O1lBeEJRLDZCQUE2Qjs7O3dCQTJCakMsS0FBSztvQkFLTCxLQUFLO3NCQUVMLEtBQUs7Ozs7SUFQTiw2Q0FFRTs7Ozs7SUFHRix5Q0FBd0M7O0lBRXhDLDJDQUFxQzs7Ozs7SUFFckMsaURBQXVDOztJQUV2QyxrREFBbUM7O0lBQ25DLDhDQUF1Qzs7Ozs7SUFFdkMsNERBQStDOzs7OztJQUczQyxpREFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUb2FzdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9Nb2RlbHMvdG9hc3QtbWVzc2FnZS5tb2RlbHMnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQW5ndWxhckJvb3RzdHJhcFRvYXN0c1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hbmd1bGFyLWJvb3RzdHJhcC10b2FzdHMuc2VydmljZSc7XHJcbmltcG9ydCB7IFBvc2l0aW9uTW9kZWwgfSBmcm9tICcuLi8uLi9Nb2RlbHMvdG9hc3QtY29udGFpbmVyLm1vZGVscyc7XHJcbmltcG9ydCB7IHRyaWdnZXIsIHN0eWxlLCBhbmltYXRlLCB0cmFuc2l0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnQW5ndWxhci1Cb290c3RyYXAtVG9hc3RzLUNvbnRhaW5lcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vdG9hc3RzLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFtcclxuICAgICAgICAnLi90b2FzdHMtY29udGFpbmVyLmNvbXBvbmVudC5jc3MnXHJcbiAgICBdLFxyXG4gICAgYW5pbWF0aW9uczogW1xyXG4gICAgICAgIHRyaWdnZXIoXHJcbiAgICAgICAgICAnZW50ZXJBbmltYXRpb24nLCBbXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJzplbnRlcicsIFtcclxuICAgICAgICAgICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxMDAlKScsIG9wYWNpdHk6IDAgfSksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlKCczNTBtcyBlYXNlJywgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJywgb3BhY2l0eTogMSB9KSlcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJzpsZWF2ZScsIFtcclxuICAgICAgICAgICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScsIG9wYWNpdHk6IDEgfSksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlKCczMDBtcyBlYXNlJywgc3R5bGUoeyB0cmFuc2Zvcm06ICdzY2FsZSgwLjEpJywgb3BhY2l0eTogMCB9KSlcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICAgIF1cclxuICAgICAgICApXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUb2FzdHNDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQElucHV0KCkgcHVibGljIFBsYWNlbWVudDogUG9zaXRpb25Nb2RlbCA9IHtcclxuICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0J1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogV2lkdGggYXMgQ1NTIHZhbHVlICovXHJcbiAgICBASW5wdXQoKSBwdWJsaWMgV2lkdGg6IHN0cmluZyA9ICcyNTBweCc7XHJcblxyXG4gICAgQElucHV0KCkgcHVibGljIENsYXNzZXM6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIHByaXZhdGUgZGVmYXVsdE1hcmdpbjogc3RyaW5nID0gJzE1cHgnO1xyXG5cclxuICAgIHB1YmxpYyBNYXJnaW5Bc1N0cmluZzogc3RyaW5nID0gJyc7XHJcbiAgICBwdWJsaWMgdG9hc3RzTGlzdDogVG9hc3RNZXNzYWdlW10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VzTGlzdFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChcclxuICAgICAgICBwcml2YXRlIHRvYXN0c1NlcnZpY2U6IEFuZ3VsYXJCb290c3RyYXBUb2FzdHNTZXJ2aWNlXHJcbiAgICApIHt9XHJcblxyXG4gICAgbmdPbkluaXQgKCkge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXNMaXN0U3Vic2NyaXB0aW9uID0gdGhpcy50b2FzdHNTZXJ2aWNlLlRvYXN0c0xpc3QkLnN1YnNjcmliZSh0b2FzdHMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvYXN0c0xpc3QgPSB0b2FzdHM7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFBhcmFtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95ICgpIHtcclxuICAgICAgICBpZiAodGhpcy5tZXNzYWdlc0xpc3RTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc0xpc3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0UGFyYW1zICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuUGxhY2VtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuUGxhY2VtZW50ID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLlBsYWNlbWVudC5tYXJnaW5Ub3AgICAgPSB0aGlzLlBsYWNlbWVudC5tYXJnaW5Ub3AgICAgfHwgdGhpcy5kZWZhdWx0TWFyZ2luO1xyXG4gICAgICAgIHRoaXMuUGxhY2VtZW50Lm1hcmdpbkJvdHRvbSA9IHRoaXMuUGxhY2VtZW50Lm1hcmdpbkJvdHRvbSB8fCB0aGlzLmRlZmF1bHRNYXJnaW47XHJcbiAgICAgICAgdGhpcy5QbGFjZW1lbnQubWFyZ2luTGVmdCAgID0gdGhpcy5QbGFjZW1lbnQubWFyZ2luTGVmdCAgIHx8IHRoaXMuZGVmYXVsdE1hcmdpbjtcclxuICAgICAgICB0aGlzLlBsYWNlbWVudC5tYXJnaW5SaWdodCAgPSB0aGlzLlBsYWNlbWVudC5tYXJnaW5SaWdodCAgfHwgdGhpcy5kZWZhdWx0TWFyZ2luO1xyXG5cclxuICAgICAgICB0aGlzLlBsYWNlbWVudC5wb3NpdGlvbiAgICAgPSB0aGlzLlBsYWNlbWVudC5wb3NpdGlvbiAgICAgfHwgJ3RvcFJpZ2h0JztcclxuICAgIH1cclxufVxyXG4iXX0=