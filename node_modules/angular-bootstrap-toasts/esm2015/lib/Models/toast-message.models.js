/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
export class ToastMessage {
    /**
     * @param {?} params
     * @param {?} systemParams
     */
    constructor(params, systemParams) {
        this.confirmationResult = new Subject();
        this.id = systemParams.id;
        this.type = systemParams.type;
        this.text = params.text;
        this.title = params.title;
        this.moment = params.moment;
        this.duration = params.duration;
        this.isProgressLineEnabled = params.showProgressLine;
        this.isDurationPausedByMouse = params.pauseDurationOnMouseEnter;
        this.isClosableByMouseClick = params.closeByClick;
        this.iconClass = params.iconClass;
        this.progressLineClass = params.progressLineClass;
        this.titleClass = params.titleClass;
        this.bodyClass = params.bodyClass;
        this.toastClass = params.toastClass;
        this.toolbarClass = params.toolbarClass;
        this.closeButtonClass = params.closeButtonClass;
        this.toolbarItems = params.toolbarItems;
    }
    /**
     * @return {?}
     */
    get ConfirmationResult$() {
        return this.confirmationResult.asObservable();
    }
    /**
     * @return {?}
     */
    get Id() {
        return this.id;
    }
    /**
     * @return {?}
     */
    get Type() {
        return this.type;
    }
    /**
     * @return {?}
     */
    get Title() {
        return this.title;
    }
    /**
     * @return {?}
     */
    get Text() {
        return this.text;
    }
    /**
     * @return {?}
     */
    get Moment() {
        return this.moment;
    }
    /**
     * @return {?}
     */
    get Duration() {
        return this.duration;
    }
    /**
     * @return {?}
     */
    get ToolbarItems() {
        return this.toolbarItems;
    }
    /**
     * @return {?}
     */
    get IsProgressLineEnabled() {
        return this.isProgressLineEnabled;
    }
    /**
     * @return {?}
     */
    get IsDurationPausedByMouse() {
        return this.isDurationPausedByMouse;
    }
    /**
     * @return {?}
     */
    get IsClosableByMouseClick() {
        return this.isClosableByMouseClick;
    }
    /**
     * @return {?}
     */
    get IconClass() {
        return this.iconClass;
    }
    /**
     * @return {?}
     */
    get CloseButtonClass() {
        return this.closeButtonClass;
    }
    /**
     * @return {?}
     */
    get ProgressLineClass() {
        return this.progressLineClass;
    }
    /**
     * @return {?}
     */
    get TitleClass() {
        return this.titleClass;
    }
    /**
     * @return {?}
     */
    get BodyClass() {
        return this.bodyClass;
    }
    /**
     * @return {?}
     */
    get ToolbarClass() {
        return this.toolbarClass;
    }
    /**
     * @return {?}
     */
    get ToastClass() {
        return this.toastClass;
    }
    /**
     * @param {?=} confirmationStatus
     * @return {?}
     */
    Close(confirmationStatus) {
        this.confirmationResult.next(confirmationStatus || false);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.confirmationResult;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.type;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.title;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.text;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.moment;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.duration;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.toolbarItems;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.isProgressLineEnabled;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.isDurationPausedByMouse;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.isClosableByMouseClick;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.iconClass;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.closeButtonClass;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.progressLineClass;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.titleClass;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.bodyClass;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.toolbarClass;
    /**
     * @type {?}
     * @private
     */
    ToastMessage.prototype.toastClass;
}
export class ToastMessageParams {
}
if (false) {
    /** @type {?} */
    ToastMessageParams.prototype.text;
    /** @type {?} */
    ToastMessageParams.prototype.title;
    /**
     * Great property to show time/date or something like this (short info near title)
     * @type {?}
     */
    ToastMessageParams.prototype.moment;
    /**
     * Time in milliseconds over which will be displayed toast
     * @type {?}
     */
    ToastMessageParams.prototype.duration;
    /**
     * Is toast will have progress line of duration time?
     * @type {?}
     */
    ToastMessageParams.prototype.showProgressLine;
    /**
     * Is toast will closable by mouse click on toast block
     * @type {?}
     */
    ToastMessageParams.prototype.closeByClick;
    /**
     * Is toast duration needs to be paused when mouse enter on toast block?
     * @type {?}
     */
    ToastMessageParams.prototype.pauseDurationOnMouseEnter;
    /**
     * Class of progress line
     * @type {?}
     */
    ToastMessageParams.prototype.progressLineClass;
    /**
     * Class of icon for title
     * For example: `fas fa-heart` (FontAwesome)
     * You can also add color class, ex: `fas fa-heart text-success` (Bootstrap color class)
     * @type {?}
     */
    ToastMessageParams.prototype.iconClass;
    /**
     * Class for title block of toast
     * @type {?}
     */
    ToastMessageParams.prototype.titleClass;
    /**
     * Class for body block of toast
     * @type {?}
     */
    ToastMessageParams.prototype.bodyClass;
    /**
     * Class for block of toast
     * @type {?}
     */
    ToastMessageParams.prototype.toastClass;
    /**
     * Class for toolbar block
     * @type {?}
     */
    ToastMessageParams.prototype.toolbarClass;
    /**
     * Class for close button
     * @type {?}
     */
    ToastMessageParams.prototype.closeButtonClass;
    /**
     * Buttons for toast with type "confirm"
     * @type {?}
     */
    ToastMessageParams.prototype.toolbarItems;
}
/**
 * @record
 */
export function SystemToastParams() { }
if (false) {
    /** @type {?} */
    SystemToastParams.prototype.id;
    /** @type {?} */
    SystemToastParams.prototype.type;
}
/**
 * @record
 */
export function ToastToolbarItems() { }
if (false) {
    /** @type {?} */
    ToastToolbarItems.prototype.actionButton;
    /** @type {?} */
    ToastToolbarItems.prototype.cancelButton;
}
/**
 * @record
 */
export function ToastToolbarButton() { }
if (false) {
    /** @type {?} */
    ToastToolbarButton.prototype.text;
    /** @type {?|undefined} */
    ToastToolbarButton.prototype.visible;
    /** @type {?|undefined} */
    ToastToolbarButton.prototype.class;
}
//# sourceMappingURL=data:application/json;base64,