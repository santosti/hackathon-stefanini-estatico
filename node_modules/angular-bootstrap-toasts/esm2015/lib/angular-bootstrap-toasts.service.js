/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ToastMessage } from './Models/toast-message.models';
export class AngularBootstrapToastsService {
    constructor() {
        this.toastsList = new BehaviorSubject([]);
        this.defaultTitle = 'Title';
        this.defaultText = 'Message';
        this.defaultDuration = 5000;
        this.minDuration = 300;
        this.maxMessageId = 1;
    }
    /**
     * @return {?}
     */
    get ToastsList$() {
        return this.toastsList.asObservable();
    }
    /**
     * @return {?}
     */
    get DefaultTitle() {
        return this.defaultTitle;
    }
    /**
     * @return {?}
     */
    get DefaultText() {
        return this.defaultText;
    }
    /**
     * @return {?}
     */
    get DefaultDuration() {
        return this.defaultDuration;
    }
    /**
     * Show success toast message
     * @param {?} params
     * @return {?}
     */
    showSimpleToast(params) {
        /** @type {?} */
        const systemParams = {
            id: this.maxMessageId,
            type: 'simple'
        };
        return this.createToast(params, systemParams);
    }
    /**
     * Show toast message with confirmation and decline button variants
     * @param {?} params
     * @return {?}
     */
    showConfirmToast(params) {
        /** @type {?} */
        const systemParams = {
            id: this.maxMessageId,
            type: 'confirm'
        };
        return this.createToast(params, systemParams);
    }
    /**
     * Change Default **Title** for all toasts wich not get `title` property from params when creating
     * @param {?} newTitle
     * @return {?}
     */
    changeDefaultTitle(newTitle) {
        /** @type {?} */
        const validTitle = this.validateTitle(newTitle);
        if (validTitle) {
            this.defaultTitle = validTitle;
        }
    }
    /**
     * Change Default **Text** for all toasts wich not get `text` property from params when creating
     * @param {?} newText
     * @return {?}
     */
    changeDefaultText(newText) {
        /** @type {?} */
        const validText = this.validateText(newText);
        if (validText) {
            this.defaultText = validText;
        }
    }
    /**
     * Change Default **Duration** for all toasts
     * @param {?} duration
     * @return {?}
     */
    changeDefaultDuration(duration) {
        /** @type {?} */
        const validDuration = this.validateDuration(duration);
        if (validDuration) {
            this.defaultDuration = duration;
        }
    }
    /**
     * @private
     * @param {?} params
     * @param {?} systemParams
     * @return {?}
     */
    createToast(params, systemParams) {
        /** @type {?} */
        const messages = this.toastsList.getValue();
        /** @type {?} */
        const validParams = this.validateParams(params);
        /** @type {?} */
        const toast = new ToastMessage(validParams, systemParams);
        messages.push(toast);
        this.maxMessageId++;
        this.toastsList.next(messages);
        /** @type {?} */
        const toastSubscription = toast.ConfirmationResult$.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const actualMessages = this.toastsList.getValue();
            for (const [index, message] of actualMessages.entries()) {
                if (message.Id === toast.Id) {
                    actualMessages.splice(index, 1);
                    break;
                }
            }
            this.toastsList.next(actualMessages);
            toastSubscription.unsubscribe();
        }));
        return toast;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    validateParams(params) {
        /** @type {?} */
        const newParams = params;
        try {
            newParams.title = this.validateTitle(newParams.title);
        }
        catch (err) {
            newParams.title = this.DefaultTitle;
        }
        try {
            newParams.text = this.validateText(newParams.text);
        }
        catch (err) {
            newParams.text = this.DefaultText;
        }
        try {
            newParams.duration = this.validateDuration(newParams.duration);
        }
        catch (err) {
            newParams.duration = this.DefaultDuration;
        }
        return newParams;
    }
    /**
     * @private
     * @param {?} title
     * @return {?}
     */
    validateTitle(title) {
        if (!title || typeof title !== 'string') {
            throw new Error('Tost default title must be a string with length');
        }
        return title;
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    validateText(text) {
        if (!text || typeof text !== 'string') {
            throw new Error('Tost default text must be a string with length');
        }
        return text;
    }
    /**
     * @private
     * @param {?} duration
     * @return {?}
     */
    validateDuration(duration) {
        /** @type {?} */
        const durationAsNumber = +duration;
        if (isNaN(durationAsNumber)) {
            throw new Error('Tost duration must be a number');
        }
        else if (durationAsNumber < this.minDuration) {
            throw new Error(`Tost duration must be more than ${this.minDuration} milliseconds`);
        }
        return durationAsNumber;
    }
}
AngularBootstrapToastsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AngularBootstrapToastsService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.toastsList;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.defaultTitle;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.defaultText;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.defaultDuration;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.minDuration;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.maxMessageId;
}
//# sourceMappingURL=data:application/json;base64,