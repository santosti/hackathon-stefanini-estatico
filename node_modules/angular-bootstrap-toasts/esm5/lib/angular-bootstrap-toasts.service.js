/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ToastMessage } from './Models/toast-message.models';
var AngularBootstrapToastsService = /** @class */ (function () {
    function AngularBootstrapToastsService() {
        this.toastsList = new BehaviorSubject([]);
        this.defaultTitle = 'Title';
        this.defaultText = 'Message';
        this.defaultDuration = 5000;
        this.minDuration = 300;
        this.maxMessageId = 1;
    }
    Object.defineProperty(AngularBootstrapToastsService.prototype, "ToastsList$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toastsList.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularBootstrapToastsService.prototype, "DefaultTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultTitle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularBootstrapToastsService.prototype, "DefaultText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularBootstrapToastsService.prototype, "DefaultDuration", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultDuration;
        },
        enumerable: true,
        configurable: true
    });
    /** Show success toast message */
    /**
     * Show success toast message
     * @param {?} params
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.showSimpleToast = /**
     * Show success toast message
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var systemParams = {
            id: this.maxMessageId,
            type: 'simple'
        };
        return this.createToast(params, systemParams);
    };
    /** Show toast message with confirmation and decline button variants */
    /**
     * Show toast message with confirmation and decline button variants
     * @param {?} params
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.showConfirmToast = /**
     * Show toast message with confirmation and decline button variants
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var systemParams = {
            id: this.maxMessageId,
            type: 'confirm'
        };
        return this.createToast(params, systemParams);
    };
    /** Change Default **Title** for all toasts wich not get `title` property from params when creating */
    /**
     * Change Default **Title** for all toasts wich not get `title` property from params when creating
     * @param {?} newTitle
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.changeDefaultTitle = /**
     * Change Default **Title** for all toasts wich not get `title` property from params when creating
     * @param {?} newTitle
     * @return {?}
     */
    function (newTitle) {
        /** @type {?} */
        var validTitle = this.validateTitle(newTitle);
        if (validTitle) {
            this.defaultTitle = validTitle;
        }
    };
    /** Change Default **Text** for all toasts wich not get `text` property from params when creating */
    /**
     * Change Default **Text** for all toasts wich not get `text` property from params when creating
     * @param {?} newText
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.changeDefaultText = /**
     * Change Default **Text** for all toasts wich not get `text` property from params when creating
     * @param {?} newText
     * @return {?}
     */
    function (newText) {
        /** @type {?} */
        var validText = this.validateText(newText);
        if (validText) {
            this.defaultText = validText;
        }
    };
    /** Change Default **Duration** for all toasts */
    /**
     * Change Default **Duration** for all toasts
     * @param {?} duration
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.changeDefaultDuration = /**
     * Change Default **Duration** for all toasts
     * @param {?} duration
     * @return {?}
     */
    function (duration) {
        /** @type {?} */
        var validDuration = this.validateDuration(duration);
        if (validDuration) {
            this.defaultDuration = duration;
        }
    };
    /**
     * @private
     * @param {?} params
     * @param {?} systemParams
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.createToast = /**
     * @private
     * @param {?} params
     * @param {?} systemParams
     * @return {?}
     */
    function (params, systemParams) {
        var _this = this;
        /** @type {?} */
        var messages = this.toastsList.getValue();
        /** @type {?} */
        var validParams = this.validateParams(params);
        /** @type {?} */
        var toast = new ToastMessage(validParams, systemParams);
        messages.push(toast);
        this.maxMessageId++;
        this.toastsList.next(messages);
        /** @type {?} */
        var toastSubscription = toast.ConfirmationResult$.subscribe((/**
         * @return {?}
         */
        function () {
            var e_1, _a;
            /** @type {?} */
            var actualMessages = _this.toastsList.getValue();
            try {
                for (var _b = tslib_1.__values(actualMessages.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_1.__read(_c.value, 2), index = _d[0], message = _d[1];
                    if (message.Id === toast.Id) {
                        actualMessages.splice(index, 1);
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.toastsList.next(actualMessages);
            toastSubscription.unsubscribe();
        }));
        return toast;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var newParams = params;
        try {
            newParams.title = this.validateTitle(newParams.title);
        }
        catch (err) {
            newParams.title = this.DefaultTitle;
        }
        try {
            newParams.text = this.validateText(newParams.text);
        }
        catch (err) {
            newParams.text = this.DefaultText;
        }
        try {
            newParams.duration = this.validateDuration(newParams.duration);
        }
        catch (err) {
            newParams.duration = this.DefaultDuration;
        }
        return newParams;
    };
    /**
     * @private
     * @param {?} title
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateTitle = /**
     * @private
     * @param {?} title
     * @return {?}
     */
    function (title) {
        if (!title || typeof title !== 'string') {
            throw new Error('Tost default title must be a string with length');
        }
        return title;
    };
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateText = /**
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        if (!text || typeof text !== 'string') {
            throw new Error('Tost default text must be a string with length');
        }
        return text;
    };
    /**
     * @private
     * @param {?} duration
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateDuration = /**
     * @private
     * @param {?} duration
     * @return {?}
     */
    function (duration) {
        /** @type {?} */
        var durationAsNumber = +duration;
        if (isNaN(durationAsNumber)) {
            throw new Error('Tost duration must be a number');
        }
        else if (durationAsNumber < this.minDuration) {
            throw new Error("Tost duration must be more than " + this.minDuration + " milliseconds");
        }
        return durationAsNumber;
    };
    AngularBootstrapToastsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AngularBootstrapToastsService.ctorParameters = function () { return []; };
    return AngularBootstrapToastsService;
}());
export { AngularBootstrapToastsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.toastsList;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.defaultTitle;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.defaultText;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.defaultDuration;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.minDuration;
    /**
     * @type {?}
     * @private
     */
    AngularBootstrapToastsService.prototype.maxMessageId;
}
//# sourceMappingURL=data:application/json;base64,