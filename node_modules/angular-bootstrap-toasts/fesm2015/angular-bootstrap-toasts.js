import { trigger, style, animate, transition } from '@angular/animations';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { Injectable, Component, Input, NgModule } from '@angular/core';
import { filter, tap } from 'rxjs/operators';
import { Subject, BehaviorSubject, interval } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToastMessage {
    /**
     * @param {?} params
     * @param {?} systemParams
     */
    constructor(params, systemParams) {
        this.confirmationResult = new Subject();
        this.id = systemParams.id;
        this.type = systemParams.type;
        this.text = params.text;
        this.title = params.title;
        this.moment = params.moment;
        this.duration = params.duration;
        this.isProgressLineEnabled = params.showProgressLine;
        this.isDurationPausedByMouse = params.pauseDurationOnMouseEnter;
        this.isClosableByMouseClick = params.closeByClick;
        this.iconClass = params.iconClass;
        this.progressLineClass = params.progressLineClass;
        this.titleClass = params.titleClass;
        this.bodyClass = params.bodyClass;
        this.toastClass = params.toastClass;
        this.toolbarClass = params.toolbarClass;
        this.closeButtonClass = params.closeButtonClass;
        this.toolbarItems = params.toolbarItems;
    }
    /**
     * @return {?}
     */
    get ConfirmationResult$() {
        return this.confirmationResult.asObservable();
    }
    /**
     * @return {?}
     */
    get Id() {
        return this.id;
    }
    /**
     * @return {?}
     */
    get Type() {
        return this.type;
    }
    /**
     * @return {?}
     */
    get Title() {
        return this.title;
    }
    /**
     * @return {?}
     */
    get Text() {
        return this.text;
    }
    /**
     * @return {?}
     */
    get Moment() {
        return this.moment;
    }
    /**
     * @return {?}
     */
    get Duration() {
        return this.duration;
    }
    /**
     * @return {?}
     */
    get ToolbarItems() {
        return this.toolbarItems;
    }
    /**
     * @return {?}
     */
    get IsProgressLineEnabled() {
        return this.isProgressLineEnabled;
    }
    /**
     * @return {?}
     */
    get IsDurationPausedByMouse() {
        return this.isDurationPausedByMouse;
    }
    /**
     * @return {?}
     */
    get IsClosableByMouseClick() {
        return this.isClosableByMouseClick;
    }
    /**
     * @return {?}
     */
    get IconClass() {
        return this.iconClass;
    }
    /**
     * @return {?}
     */
    get CloseButtonClass() {
        return this.closeButtonClass;
    }
    /**
     * @return {?}
     */
    get ProgressLineClass() {
        return this.progressLineClass;
    }
    /**
     * @return {?}
     */
    get TitleClass() {
        return this.titleClass;
    }
    /**
     * @return {?}
     */
    get BodyClass() {
        return this.bodyClass;
    }
    /**
     * @return {?}
     */
    get ToolbarClass() {
        return this.toolbarClass;
    }
    /**
     * @return {?}
     */
    get ToastClass() {
        return this.toastClass;
    }
    /**
     * @param {?=} confirmationStatus
     * @return {?}
     */
    Close(confirmationStatus) {
        this.confirmationResult.next(confirmationStatus || false);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularBootstrapToastsService {
    constructor() {
        this.toastsList = new BehaviorSubject([]);
        this.defaultTitle = 'Title';
        this.defaultText = 'Message';
        this.defaultDuration = 5000;
        this.minDuration = 300;
        this.maxMessageId = 1;
    }
    /**
     * @return {?}
     */
    get ToastsList$() {
        return this.toastsList.asObservable();
    }
    /**
     * @return {?}
     */
    get DefaultTitle() {
        return this.defaultTitle;
    }
    /**
     * @return {?}
     */
    get DefaultText() {
        return this.defaultText;
    }
    /**
     * @return {?}
     */
    get DefaultDuration() {
        return this.defaultDuration;
    }
    /**
     * Show success toast message
     * @param {?} params
     * @return {?}
     */
    showSimpleToast(params) {
        /** @type {?} */
        const systemParams = {
            id: this.maxMessageId,
            type: 'simple'
        };
        return this.createToast(params, systemParams);
    }
    /**
     * Show toast message with confirmation and decline button variants
     * @param {?} params
     * @return {?}
     */
    showConfirmToast(params) {
        /** @type {?} */
        const systemParams = {
            id: this.maxMessageId,
            type: 'confirm'
        };
        return this.createToast(params, systemParams);
    }
    /**
     * Change Default **Title** for all toasts wich not get `title` property from params when creating
     * @param {?} newTitle
     * @return {?}
     */
    changeDefaultTitle(newTitle) {
        /** @type {?} */
        const validTitle = this.validateTitle(newTitle);
        if (validTitle) {
            this.defaultTitle = validTitle;
        }
    }
    /**
     * Change Default **Text** for all toasts wich not get `text` property from params when creating
     * @param {?} newText
     * @return {?}
     */
    changeDefaultText(newText) {
        /** @type {?} */
        const validText = this.validateText(newText);
        if (validText) {
            this.defaultText = validText;
        }
    }
    /**
     * Change Default **Duration** for all toasts
     * @param {?} duration
     * @return {?}
     */
    changeDefaultDuration(duration) {
        /** @type {?} */
        const validDuration = this.validateDuration(duration);
        if (validDuration) {
            this.defaultDuration = duration;
        }
    }
    /**
     * @private
     * @param {?} params
     * @param {?} systemParams
     * @return {?}
     */
    createToast(params, systemParams) {
        /** @type {?} */
        const messages = this.toastsList.getValue();
        /** @type {?} */
        const validParams = this.validateParams(params);
        /** @type {?} */
        const toast = new ToastMessage(validParams, systemParams);
        messages.push(toast);
        this.maxMessageId++;
        this.toastsList.next(messages);
        /** @type {?} */
        const toastSubscription = toast.ConfirmationResult$.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const actualMessages = this.toastsList.getValue();
            for (const [index, message] of actualMessages.entries()) {
                if (message.Id === toast.Id) {
                    actualMessages.splice(index, 1);
                    break;
                }
            }
            this.toastsList.next(actualMessages);
            toastSubscription.unsubscribe();
        }));
        return toast;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    validateParams(params) {
        /** @type {?} */
        const newParams = params;
        try {
            newParams.title = this.validateTitle(newParams.title);
        }
        catch (err) {
            newParams.title = this.DefaultTitle;
        }
        try {
            newParams.text = this.validateText(newParams.text);
        }
        catch (err) {
            newParams.text = this.DefaultText;
        }
        try {
            newParams.duration = this.validateDuration(newParams.duration);
        }
        catch (err) {
            newParams.duration = this.DefaultDuration;
        }
        return newParams;
    }
    /**
     * @private
     * @param {?} title
     * @return {?}
     */
    validateTitle(title) {
        if (!title || typeof title !== 'string') {
            throw new Error('Tost default title must be a string with length');
        }
        return title;
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    validateText(text) {
        if (!text || typeof text !== 'string') {
            throw new Error('Tost default text must be a string with length');
        }
        return text;
    }
    /**
     * @private
     * @param {?} duration
     * @return {?}
     */
    validateDuration(duration) {
        /** @type {?} */
        const durationAsNumber = +duration;
        if (isNaN(durationAsNumber)) {
            throw new Error('Tost duration must be a number');
        }
        else if (durationAsNumber < this.minDuration) {
            throw new Error(`Tost duration must be more than ${this.minDuration} milliseconds`);
        }
        return durationAsNumber;
    }
}
AngularBootstrapToastsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AngularBootstrapToastsService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToastsContainerComponent {
    /**
     * @param {?} toastsService
     */
    constructor(toastsService) {
        this.toastsService = toastsService;
        this.Placement = {
            position: 'topRight'
        };
        /**
         * Width as CSS value
         */
        this.Width = '250px';
        this.Classes = '';
        this.defaultMargin = '15px';
        this.MarginAsString = '';
        this.toastsList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.messagesListSubscription = this.toastsService.ToastsList$.subscribe((/**
         * @param {?} toasts
         * @return {?}
         */
        toasts => {
            this.toastsList = toasts;
        }));
        this.initParams();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.messagesListSubscription) {
            this.messagesListSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initParams() {
        if (!this.Placement) {
            this.Placement = {};
        }
        this.Placement.marginTop = this.Placement.marginTop || this.defaultMargin;
        this.Placement.marginBottom = this.Placement.marginBottom || this.defaultMargin;
        this.Placement.marginLeft = this.Placement.marginLeft || this.defaultMargin;
        this.Placement.marginRight = this.Placement.marginRight || this.defaultMargin;
        this.Placement.position = this.Placement.position || 'topRight';
    }
}
ToastsContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'Angular-Bootstrap-Toasts-Container',
                template: "<div\r\n    class=\"Advanced-Bootstrap-Container {{ Classes || '' }}\"\r\n    [style.width]=\"Width\"\r\n    [style.left]=\"(Placement.position === 'topLeft'      || Placement.position === 'bottomLeft')  ? Placement.marginLeft : ''\"\r\n    [style.right]=\"(Placement.position === 'topRight'    || Placement.position === 'bottomRight') ? Placement.marginRight : ''\"\r\n    [style.top]=\"(Placement.position === 'topLeft'       || Placement.position === 'topRight')    ? Placement.marginTop : ''\"\r\n    [style.bottom]=\"(Placement.position === 'bottomLeft' || Placement.position === 'bottomRight') ? Placement.marginBottom : ''\">\r\n    \r\n    <Toast-Message\r\n        *ngFor=\"let toast of toastsList\"\r\n        class=\"Toast-Message-Container\"\r\n        [@enterAnimation]\r\n        [Toast]=\"toast\"></Toast-Message>\r\n\r\n</div>",
                animations: [
                    trigger('enterAnimation', [
                        transition(':enter', [
                            style({ transform: 'translateX(100%)', opacity: 0 }),
                            animate('350ms ease', style({ transform: 'translateX(0)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ transform: 'translateX(0)', opacity: 1 }),
                            animate('300ms ease', style({ transform: 'scale(0.1)', opacity: 0 }))
                        ])
                    ])
                ],
                styles: [".Advanced-Bootstrap-Container{position:fixed;z-index:9999!important}"]
            }] }
];
/** @nocollapse */
ToastsContainerComponent.ctorParameters = () => [
    { type: AngularBootstrapToastsService }
];
ToastsContainerComponent.propDecorators = {
    Placement: [{ type: Input }],
    Width: [{ type: Input }],
    Classes: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToastMessageComponent {
    /**
     * @param {?} toastsService
     */
    constructor(toastsService) {
        this.toastsService = toastsService;
        this.progressLineWidth = '100%';
        this.msInterval = 10;
        this.isMouseFocused = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentDuration = this.Toast.Duration;
        this.durationTimer = interval(this.msInterval).pipe(filter((/**
         * @return {?}
         */
        () => !this.isMouseFocused)), tap((/**
         * @return {?}
         */
        () => {
            this.currentDuration -= this.msInterval;
            if (this.Toast.IsProgressLineEnabled) {
                this.progressLineWidth = (100 / this.Toast.Duration * this.currentDuration).toFixed(0) + '%';
            }
            if (this.currentDuration <= 0) {
                this.Toast.Close();
            }
        }))).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.durationTimer) {
            this.durationTimer.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    animationPause() {
        this.isMouseFocused = true;
    }
    /**
     * @return {?}
     */
    animationPlay() {
        this.isMouseFocused = false;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.Toast.IsClosableByMouseClick) {
            this.Toast.Close(false);
        }
    }
    /**
     * @param {?=} confirmationResult
     * @return {?}
     */
    remove(confirmationResult) {
        this.Toast.Close(confirmationResult || false);
    }
}
ToastMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'Toast-Message',
                template: "<div\r\n    class=\"_toast {{ Toast.ToastClass || '' }}\"\r\n    (mouseover)=\"animationPause()\"\r\n    (mouseout)=\"animationPlay()\"\r\n    (click)=\"onClick()\">\r\n    <div class=\"_toast-header {{ Toast.TitleClass || '' }}\">\r\n        <i\r\n            *ngIf=\"Toast.IconClass\"\r\n            class=\"{{ Toast.IconClass }}\"></i>\r\n\r\n        <strong\r\n            class=\"mr-auto\">{{ Toast.Title }}</strong>\r\n\r\n        <small *ngIf=\"Toast.Moment\">{{ Toast.Moment }}</small>\r\n\r\n        <button\r\n            type=\"button\"\r\n            class=\"_close {{ Toast.CloseButtonClass || '' }}\"\r\n            (click)=\"remove()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n\r\n    <div\r\n        *ngIf=\"Toast.IsProgressLineEnabled\"\r\n        class=\"_duration-line {{ Toast.ProgressLineClass || '' }}\"\r\n        [style.width]=\"progressLineWidth\"></div>\r\n\r\n    <div\r\n        class=\"_toast-body {{ Toast.BodyClass || '' }}\"\r\n        [innerHTML]=\"Toast.Text\"></div>\r\n\r\n    <div\r\n        *ngIf=\"Toast.Type === 'confirm' && Toast.ToolbarItems\"\r\n        class=\"_toast-toolbar {{ Toast.ToolbarClass || '' }}\">\r\n        <button\r\n            *ngIf=\"Toast.ToolbarItems.actionButton.visible\"\r\n            class=\"_toast-toolbar_actionButton {{ Toast.ToolbarItems.actionButton.class || 'btn btn-success btn-sm' }}\"\r\n            (click)=\"remove(true)\">{{ Toast.ToolbarItems.actionButton.text || 'Confirm' }}</button>\r\n\r\n        <button\r\n            *ngIf=\"Toast.ToolbarItems.cancelButton.visible\"\r\n            class=\"_toast-toolbar_cancelButton {{ Toast.ToolbarItems.cancelButton.class || 'btn btn-light btn-sm' }}\"\r\n            (click)=\"remove(false)\">{{ Toast.ToolbarItems.cancelButton.text || 'Cancel' }}</button>\r\n    </div>\r\n</div>",
                styles: [":host{display:block}._toast{width:100%;margin-bottom:10px;border:1px solid #dadada;background:#fff;box-shadow:0 7px 9px -4px rgba(0,0,0,.2),0 14px 21px 2px rgba(0,0,0,.14),0 5px 26px 4px rgba(0,0,0,.12)}._toast-header{width:100%;display:flex;align-items:center;padding:8px;border-bottom:1px solid #dfe0e1;background:#f5f5f5;color:#6c757d}._duration-line{height:3px;background:rgba(0,0,0,.25);transition:.1s}._toast-body{font-size:12px;padding:12px;background:#fff}._toast-header i{margin-right:7px}._toast-header strong{font-size:16px}._toast-header small{font-size:11px;color:#6c757d}._toast-toolbar{margin:10px}._toast-toolbar_actionButton{margin-right:8px}button._close{padding:0;margin-left:.5rem;margin-bottom:.25rem;float:right;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0;font-size:1.5rem;font-weight:700;line-height:1;color:#000;opacity:.6}button._close:hover{cursor:pointer;opacity:.8}"]
            }] }
];
/** @nocollapse */
ToastMessageComponent.ctorParameters = () => [
    { type: AngularBootstrapToastsService }
];
ToastMessageComponent.propDecorators = {
    Toast: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularBootstrapToastsModule {
}
AngularBootstrapToastsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ToastsContainerComponent,
                    ToastMessageComponent
                ],
                imports: [
                    BrowserModule,
                    BrowserAnimationsModule
                ],
                exports: [
                    ToastsContainerComponent
                ],
                providers: [
                    AngularBootstrapToastsService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularBootstrapToastsService, ToastsContainerComponent, AngularBootstrapToastsModule, ToastMessageComponent as ɵa };

//# sourceMappingURL=angular-bootstrap-toasts.js.map