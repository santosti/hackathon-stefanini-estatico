import { __values, __read } from 'tslib';
import { trigger, style, animate, transition } from '@angular/animations';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { Injectable, Component, Input, NgModule } from '@angular/core';
import { filter, tap } from 'rxjs/operators';
import { Subject, BehaviorSubject, interval } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ToastMessage = /** @class */ (function () {
    function ToastMessage(params, systemParams) {
        this.confirmationResult = new Subject();
        this.id = systemParams.id;
        this.type = systemParams.type;
        this.text = params.text;
        this.title = params.title;
        this.moment = params.moment;
        this.duration = params.duration;
        this.isProgressLineEnabled = params.showProgressLine;
        this.isDurationPausedByMouse = params.pauseDurationOnMouseEnter;
        this.isClosableByMouseClick = params.closeByClick;
        this.iconClass = params.iconClass;
        this.progressLineClass = params.progressLineClass;
        this.titleClass = params.titleClass;
        this.bodyClass = params.bodyClass;
        this.toastClass = params.toastClass;
        this.toolbarClass = params.toolbarClass;
        this.closeButtonClass = params.closeButtonClass;
        this.toolbarItems = params.toolbarItems;
    }
    Object.defineProperty(ToastMessage.prototype, "ConfirmationResult$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.confirmationResult.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "Id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "Type", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "Title", {
        get: /**
         * @return {?}
         */
        function () {
            return this.title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "Text", {
        get: /**
         * @return {?}
         */
        function () {
            return this.text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "Moment", {
        get: /**
         * @return {?}
         */
        function () {
            return this.moment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "Duration", {
        get: /**
         * @return {?}
         */
        function () {
            return this.duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "ToolbarItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toolbarItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "IsProgressLineEnabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isProgressLineEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "IsDurationPausedByMouse", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDurationPausedByMouse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "IsClosableByMouseClick", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isClosableByMouseClick;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "IconClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.iconClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "CloseButtonClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.closeButtonClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "ProgressLineClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.progressLineClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "TitleClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.titleClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "BodyClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.bodyClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "ToolbarClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toolbarClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastMessage.prototype, "ToastClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toastClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} confirmationStatus
     * @return {?}
     */
    ToastMessage.prototype.Close = /**
     * @param {?=} confirmationStatus
     * @return {?}
     */
    function (confirmationStatus) {
        this.confirmationResult.next(confirmationStatus || false);
    };
    return ToastMessage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularBootstrapToastsService = /** @class */ (function () {
    function AngularBootstrapToastsService() {
        this.toastsList = new BehaviorSubject([]);
        this.defaultTitle = 'Title';
        this.defaultText = 'Message';
        this.defaultDuration = 5000;
        this.minDuration = 300;
        this.maxMessageId = 1;
    }
    Object.defineProperty(AngularBootstrapToastsService.prototype, "ToastsList$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toastsList.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularBootstrapToastsService.prototype, "DefaultTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultTitle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularBootstrapToastsService.prototype, "DefaultText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularBootstrapToastsService.prototype, "DefaultDuration", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultDuration;
        },
        enumerable: true,
        configurable: true
    });
    /** Show success toast message */
    /**
     * Show success toast message
     * @param {?} params
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.showSimpleToast = /**
     * Show success toast message
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var systemParams = {
            id: this.maxMessageId,
            type: 'simple'
        };
        return this.createToast(params, systemParams);
    };
    /** Show toast message with confirmation and decline button variants */
    /**
     * Show toast message with confirmation and decline button variants
     * @param {?} params
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.showConfirmToast = /**
     * Show toast message with confirmation and decline button variants
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var systemParams = {
            id: this.maxMessageId,
            type: 'confirm'
        };
        return this.createToast(params, systemParams);
    };
    /** Change Default **Title** for all toasts wich not get `title` property from params when creating */
    /**
     * Change Default **Title** for all toasts wich not get `title` property from params when creating
     * @param {?} newTitle
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.changeDefaultTitle = /**
     * Change Default **Title** for all toasts wich not get `title` property from params when creating
     * @param {?} newTitle
     * @return {?}
     */
    function (newTitle) {
        /** @type {?} */
        var validTitle = this.validateTitle(newTitle);
        if (validTitle) {
            this.defaultTitle = validTitle;
        }
    };
    /** Change Default **Text** for all toasts wich not get `text` property from params when creating */
    /**
     * Change Default **Text** for all toasts wich not get `text` property from params when creating
     * @param {?} newText
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.changeDefaultText = /**
     * Change Default **Text** for all toasts wich not get `text` property from params when creating
     * @param {?} newText
     * @return {?}
     */
    function (newText) {
        /** @type {?} */
        var validText = this.validateText(newText);
        if (validText) {
            this.defaultText = validText;
        }
    };
    /** Change Default **Duration** for all toasts */
    /**
     * Change Default **Duration** for all toasts
     * @param {?} duration
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.changeDefaultDuration = /**
     * Change Default **Duration** for all toasts
     * @param {?} duration
     * @return {?}
     */
    function (duration) {
        /** @type {?} */
        var validDuration = this.validateDuration(duration);
        if (validDuration) {
            this.defaultDuration = duration;
        }
    };
    /**
     * @private
     * @param {?} params
     * @param {?} systemParams
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.createToast = /**
     * @private
     * @param {?} params
     * @param {?} systemParams
     * @return {?}
     */
    function (params, systemParams) {
        var _this = this;
        /** @type {?} */
        var messages = this.toastsList.getValue();
        /** @type {?} */
        var validParams = this.validateParams(params);
        /** @type {?} */
        var toast = new ToastMessage(validParams, systemParams);
        messages.push(toast);
        this.maxMessageId++;
        this.toastsList.next(messages);
        /** @type {?} */
        var toastSubscription = toast.ConfirmationResult$.subscribe((/**
         * @return {?}
         */
        function () {
            var e_1, _a;
            /** @type {?} */
            var actualMessages = _this.toastsList.getValue();
            try {
                for (var _b = __values(actualMessages.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), index = _d[0], message = _d[1];
                    if (message.Id === toast.Id) {
                        actualMessages.splice(index, 1);
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.toastsList.next(actualMessages);
            toastSubscription.unsubscribe();
        }));
        return toast;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var newParams = params;
        try {
            newParams.title = this.validateTitle(newParams.title);
        }
        catch (err) {
            newParams.title = this.DefaultTitle;
        }
        try {
            newParams.text = this.validateText(newParams.text);
        }
        catch (err) {
            newParams.text = this.DefaultText;
        }
        try {
            newParams.duration = this.validateDuration(newParams.duration);
        }
        catch (err) {
            newParams.duration = this.DefaultDuration;
        }
        return newParams;
    };
    /**
     * @private
     * @param {?} title
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateTitle = /**
     * @private
     * @param {?} title
     * @return {?}
     */
    function (title) {
        if (!title || typeof title !== 'string') {
            throw new Error('Tost default title must be a string with length');
        }
        return title;
    };
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateText = /**
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        if (!text || typeof text !== 'string') {
            throw new Error('Tost default text must be a string with length');
        }
        return text;
    };
    /**
     * @private
     * @param {?} duration
     * @return {?}
     */
    AngularBootstrapToastsService.prototype.validateDuration = /**
     * @private
     * @param {?} duration
     * @return {?}
     */
    function (duration) {
        /** @type {?} */
        var durationAsNumber = +duration;
        if (isNaN(durationAsNumber)) {
            throw new Error('Tost duration must be a number');
        }
        else if (durationAsNumber < this.minDuration) {
            throw new Error("Tost duration must be more than " + this.minDuration + " milliseconds");
        }
        return durationAsNumber;
    };
    AngularBootstrapToastsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AngularBootstrapToastsService.ctorParameters = function () { return []; };
    return AngularBootstrapToastsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ToastsContainerComponent = /** @class */ (function () {
    function ToastsContainerComponent(toastsService) {
        this.toastsService = toastsService;
        this.Placement = {
            position: 'topRight'
        };
        /**
         * Width as CSS value
         */
        this.Width = '250px';
        this.Classes = '';
        this.defaultMargin = '15px';
        this.MarginAsString = '';
        this.toastsList = [];
    }
    /**
     * @return {?}
     */
    ToastsContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.messagesListSubscription = this.toastsService.ToastsList$.subscribe((/**
         * @param {?} toasts
         * @return {?}
         */
        function (toasts) {
            _this.toastsList = toasts;
        }));
        this.initParams();
    };
    /**
     * @return {?}
     */
    ToastsContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.messagesListSubscription) {
            this.messagesListSubscription.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ToastsContainerComponent.prototype.initParams = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.Placement) {
            this.Placement = {};
        }
        this.Placement.marginTop = this.Placement.marginTop || this.defaultMargin;
        this.Placement.marginBottom = this.Placement.marginBottom || this.defaultMargin;
        this.Placement.marginLeft = this.Placement.marginLeft || this.defaultMargin;
        this.Placement.marginRight = this.Placement.marginRight || this.defaultMargin;
        this.Placement.position = this.Placement.position || 'topRight';
    };
    ToastsContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Angular-Bootstrap-Toasts-Container',
                    template: "<div\r\n    class=\"Advanced-Bootstrap-Container {{ Classes || '' }}\"\r\n    [style.width]=\"Width\"\r\n    [style.left]=\"(Placement.position === 'topLeft'      || Placement.position === 'bottomLeft')  ? Placement.marginLeft : ''\"\r\n    [style.right]=\"(Placement.position === 'topRight'    || Placement.position === 'bottomRight') ? Placement.marginRight : ''\"\r\n    [style.top]=\"(Placement.position === 'topLeft'       || Placement.position === 'topRight')    ? Placement.marginTop : ''\"\r\n    [style.bottom]=\"(Placement.position === 'bottomLeft' || Placement.position === 'bottomRight') ? Placement.marginBottom : ''\">\r\n    \r\n    <Toast-Message\r\n        *ngFor=\"let toast of toastsList\"\r\n        class=\"Toast-Message-Container\"\r\n        [@enterAnimation]\r\n        [Toast]=\"toast\"></Toast-Message>\r\n\r\n</div>",
                    animations: [
                        trigger('enterAnimation', [
                            transition(':enter', [
                                style({ transform: 'translateX(100%)', opacity: 0 }),
                                animate('350ms ease', style({ transform: 'translateX(0)', opacity: 1 }))
                            ]),
                            transition(':leave', [
                                style({ transform: 'translateX(0)', opacity: 1 }),
                                animate('300ms ease', style({ transform: 'scale(0.1)', opacity: 0 }))
                            ])
                        ])
                    ],
                    styles: [".Advanced-Bootstrap-Container{position:fixed;z-index:9999!important}"]
                }] }
    ];
    /** @nocollapse */
    ToastsContainerComponent.ctorParameters = function () { return [
        { type: AngularBootstrapToastsService }
    ]; };
    ToastsContainerComponent.propDecorators = {
        Placement: [{ type: Input }],
        Width: [{ type: Input }],
        Classes: [{ type: Input }]
    };
    return ToastsContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ToastMessageComponent = /** @class */ (function () {
    function ToastMessageComponent(toastsService) {
        this.toastsService = toastsService;
        this.progressLineWidth = '100%';
        this.msInterval = 10;
        this.isMouseFocused = false;
    }
    /**
     * @return {?}
     */
    ToastMessageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.currentDuration = this.Toast.Duration;
        this.durationTimer = interval(this.msInterval).pipe(filter((/**
         * @return {?}
         */
        function () { return !_this.isMouseFocused; })), tap((/**
         * @return {?}
         */
        function () {
            _this.currentDuration -= _this.msInterval;
            if (_this.Toast.IsProgressLineEnabled) {
                _this.progressLineWidth = (100 / _this.Toast.Duration * _this.currentDuration).toFixed(0) + '%';
            }
            if (_this.currentDuration <= 0) {
                _this.Toast.Close();
            }
        }))).subscribe();
    };
    /**
     * @return {?}
     */
    ToastMessageComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.durationTimer) {
            this.durationTimer.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ToastMessageComponent.prototype.animationPause = /**
     * @return {?}
     */
    function () {
        this.isMouseFocused = true;
    };
    /**
     * @return {?}
     */
    ToastMessageComponent.prototype.animationPlay = /**
     * @return {?}
     */
    function () {
        this.isMouseFocused = false;
    };
    /**
     * @return {?}
     */
    ToastMessageComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.Toast.IsClosableByMouseClick) {
            this.Toast.Close(false);
        }
    };
    /**
     * @param {?=} confirmationResult
     * @return {?}
     */
    ToastMessageComponent.prototype.remove = /**
     * @param {?=} confirmationResult
     * @return {?}
     */
    function (confirmationResult) {
        this.Toast.Close(confirmationResult || false);
    };
    ToastMessageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Toast-Message',
                    template: "<div\r\n    class=\"_toast {{ Toast.ToastClass || '' }}\"\r\n    (mouseover)=\"animationPause()\"\r\n    (mouseout)=\"animationPlay()\"\r\n    (click)=\"onClick()\">\r\n    <div class=\"_toast-header {{ Toast.TitleClass || '' }}\">\r\n        <i\r\n            *ngIf=\"Toast.IconClass\"\r\n            class=\"{{ Toast.IconClass }}\"></i>\r\n\r\n        <strong\r\n            class=\"mr-auto\">{{ Toast.Title }}</strong>\r\n\r\n        <small *ngIf=\"Toast.Moment\">{{ Toast.Moment }}</small>\r\n\r\n        <button\r\n            type=\"button\"\r\n            class=\"_close {{ Toast.CloseButtonClass || '' }}\"\r\n            (click)=\"remove()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n\r\n    <div\r\n        *ngIf=\"Toast.IsProgressLineEnabled\"\r\n        class=\"_duration-line {{ Toast.ProgressLineClass || '' }}\"\r\n        [style.width]=\"progressLineWidth\"></div>\r\n\r\n    <div\r\n        class=\"_toast-body {{ Toast.BodyClass || '' }}\"\r\n        [innerHTML]=\"Toast.Text\"></div>\r\n\r\n    <div\r\n        *ngIf=\"Toast.Type === 'confirm' && Toast.ToolbarItems\"\r\n        class=\"_toast-toolbar {{ Toast.ToolbarClass || '' }}\">\r\n        <button\r\n            *ngIf=\"Toast.ToolbarItems.actionButton.visible\"\r\n            class=\"_toast-toolbar_actionButton {{ Toast.ToolbarItems.actionButton.class || 'btn btn-success btn-sm' }}\"\r\n            (click)=\"remove(true)\">{{ Toast.ToolbarItems.actionButton.text || 'Confirm' }}</button>\r\n\r\n        <button\r\n            *ngIf=\"Toast.ToolbarItems.cancelButton.visible\"\r\n            class=\"_toast-toolbar_cancelButton {{ Toast.ToolbarItems.cancelButton.class || 'btn btn-light btn-sm' }}\"\r\n            (click)=\"remove(false)\">{{ Toast.ToolbarItems.cancelButton.text || 'Cancel' }}</button>\r\n    </div>\r\n</div>",
                    styles: [":host{display:block}._toast{width:100%;margin-bottom:10px;border:1px solid #dadada;background:#fff;box-shadow:0 7px 9px -4px rgba(0,0,0,.2),0 14px 21px 2px rgba(0,0,0,.14),0 5px 26px 4px rgba(0,0,0,.12)}._toast-header{width:100%;display:flex;align-items:center;padding:8px;border-bottom:1px solid #dfe0e1;background:#f5f5f5;color:#6c757d}._duration-line{height:3px;background:rgba(0,0,0,.25);transition:.1s}._toast-body{font-size:12px;padding:12px;background:#fff}._toast-header i{margin-right:7px}._toast-header strong{font-size:16px}._toast-header small{font-size:11px;color:#6c757d}._toast-toolbar{margin:10px}._toast-toolbar_actionButton{margin-right:8px}button._close{padding:0;margin-left:.5rem;margin-bottom:.25rem;float:right;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0;font-size:1.5rem;font-weight:700;line-height:1;color:#000;opacity:.6}button._close:hover{cursor:pointer;opacity:.8}"]
                }] }
    ];
    /** @nocollapse */
    ToastMessageComponent.ctorParameters = function () { return [
        { type: AngularBootstrapToastsService }
    ]; };
    ToastMessageComponent.propDecorators = {
        Toast: [{ type: Input }]
    };
    return ToastMessageComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularBootstrapToastsModule = /** @class */ (function () {
    function AngularBootstrapToastsModule() {
    }
    AngularBootstrapToastsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ToastsContainerComponent,
                        ToastMessageComponent
                    ],
                    imports: [
                        BrowserModule,
                        BrowserAnimationsModule
                    ],
                    exports: [
                        ToastsContainerComponent
                    ],
                    providers: [
                        AngularBootstrapToastsService
                    ]
                },] }
    ];
    return AngularBootstrapToastsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularBootstrapToastsService, ToastsContainerComponent, AngularBootstrapToastsModule, ToastMessageComponent as ɵa };

//# sourceMappingURL=angular-bootstrap-toasts.js.map